@model Tournament

@{
    ViewBag.Title = $"{ViewBag.Operation} Tournament";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drag and Drop Colored Squares</title>
    <style>
        #pool {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            padding: 20px;
            border: 1px solid #ccc;
        }

        .square {
            height: 40px;
            width: auto;
            max-width: 200px;
            cursor: move;
            border: 2px solid black;
            position: relative;
            display: flex; /* Key for dynamic width */
            align-items: center; /* Key for vertical centering */
            padding: 0 10px; /* Add some padding for visual comfort */
            box-shadow: 0 0 10px rgba(0,0,0,.05), 2px 2px 5px rgba(0,0,0,.75);
            border-radius: 14px;
            white-space: nowrap; /* Prevent text from wrapping */
            min-width: 100px;
        }

        .square .name {
            color: black;
            font-weight: bold;
            /* Remove unnecessary positioning styles */
            margin: 0 auto; /* Center the text horizontally */
            /* No need for position: absolute, top, vertical-align */
            overflow: hidden; /* Hide overflowing text */
            text-overflow: ellipsis; /* Add ellipsis (...) for overflow */
            white-space: nowrap; /* Prevent text from wrapping */
            margin-right: 25px; /* Add space for the 'x' */
            margin-left: 0;
        }

        .square .x {
            color: red;
            font-weight: bold;
            right: 10px;
            /* Remove unnecessary positioning styles */
            margin: 0 auto; /* Center the text horizontally */
            position: absolute;
            /* No need for position: absolute, top, vertical-align */
            display: none; /* Hidden by default */
            cursor: pointer;
        }

            
        #drop-zone .square:hover span {
            display: block;
        }        

        #drop-zone {
            /*width: 300px;*/
            height: 200px;
            border: 1px dashed #ccc;
            margin: 20px auto; /* Center the drop zone */
            display: flex;
            flex-wrap: wrap; /* Allow multiple squares to be dropped */
            gap: 10px;
            padding: 10px;
        }

        #log {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            height: 100px;
            overflow-y: scroll;
        }
    </style>
</head>
<body>

    <h1>Select Players</h1>

    <div id="pool">Pool 

        @foreach (Player player in ViewBag.AllPlayers)
        {
            <div id="@player.PlayerId" class="square" draggable="true" ondragenter="dragEnter(event)" ondragstart="event.dataTransfer.setData('text', '@player.PlayerId')" ondragleave="dragLeave(event)" ondragover="dragOver(event)">
                <span class="name">@player.Name</span>
                <span class="x">x</span>
            </div>
        }
    </div>

    <div id="drop-zone">Tournament Players
        
    </div>


    <div id="partialZone">
        @await Component.InvokeAsync("CreatePlayer", new { returnToPlayerPage = false })
    </div>

    <form asp-action="AddEdit" method="post" enctype="multipart/form-data">
        <input type="hidden" asp-for="TournamentId" />
        <input type="hidden" asp-for="TeamTournaments" />
        <input type="hidden" asp-for="Rounds" />

        <div class="form-group">
            <label asp-for="Name"></label>
            <input asp-for="Name" class="form-control" name="Name" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        @foreach (Player player in ViewBag.AllPlayers)
        {
            <div class="form-check">
                @{
                    bool isChecked = Model.PlayerTournaments != null && Model.PlayerTournaments.Any(i => i.PlayerID == player.PlayerId);
                }
                <input type="checkbox" class="form-check-input" id="@player.PlayerId" name="playerIDs" value="@player.PlayerId"
                @(isChecked ? "checked" : "") />
                <label class="form-check-label" for="@player.PlayerId">@player.Name</label>
            </div>
        }
        <button tpye="submit" class="btn btn-primary">Create</button>
    </form>

    <script>
        const pool = document.getElementById('pool');
        const dropZone = document.getElementById('drop-zone');      
   

        function dragStart(event) 
        {
            event.dataTransfer.setData('text', event.squareId);
        }

        function dragEnter(event) 
        {
            event.preventDefault();
            dropZone.style.border = "2px dashed green";
        }

        function dragOver(event) 
        {
            event.preventDefault();
        }

        function dragLeave(event) 
        {
            dropZone.style.border = "1px dashed #ccc";
        }

        function dragDrop(event) 
        {
            event.preventDefault();
            dropZone.style.border = "1px dashed #ccc";
            const draggedElementId = event.dataTransfer.getData('text');
            const draggedElement = document.getElementById(draggedElementId);
            if (draggedElement) {
                dropZone.appendChild(draggedElement);
            }
        }

        dropZone.addEventListener('dragenter', (event) => {
            event.preventDefault();
            dropZone.style.border = "2px dashed green";            
        });

        dropZone.addEventListener('dragover', (event) => {
            event.preventDefault();            
        });

        dropZone.addEventListener('dragleave', (event) => {
            dropZone.style.border = "1px dashed #ccc";  
        });

        dropZone.addEventListener('drop', (event) => {
            event.preventDefault();
            dropZone.style.border = "1px dashed #ccc";
            const draggedElementId = event.dataTransfer.getData('text');
            const draggedElement = document.getElementById(draggedElementId);
            if (draggedElement) {
                dropZone.appendChild(draggedElement);
            }
        });

        // Event listener for the 'x' click
        dropZone.addEventListener('click', (event) => {
            if (event.target.className === 'x') { // Check if the 'x' was clicked
                const square = event.target.parentNode;
                const squareId = square.id;

                console.log(squareId);

                pool.appendChild(square); // Move back to the pool

                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value; // Get the token from the form
                
                $.ajax({ // Use $.ajax for more control
                    type: "POST",
                    url: '@Url.Action("RemovePlayer", "Tournament")',
                    data: { playerId: squareId },
                    headers: {
                        "RequestVerificationToken": antiForgeryToken // Add the token to the headers
                    },
                    success: function (response) {
                        // Handle success (e.g., remove the element from the UI)
                        console.log("Player removed successfully");
                    },
                    error: function (error) {
                        // Handle errors
                        console.error("Error removing player:", error);
                    }
                });
            }
        });


      
    </script>

</body>
</html>