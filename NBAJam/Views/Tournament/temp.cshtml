@{
    ViewBag.Title = "Bracket";

}
<head>
    <style>
        .name-container {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .square {
            height: 40px;
            width: auto;
            max-width: 200px;
            cursor: move;
            border: 2px solid black;
            position: relative;
            display: flex; /* Key for dynamic width */
            align-items: center; /* Key for vertical centering */
            padding: 0 10px; /* Add some padding for visual comfort */
            box-shadow: 0 0 10px rgba(0,0,0,.05), 2px 2px 5px rgba(0,0,0,.75);
            border-radius: 14px;
            white-space: nowrap; /* Prevent text from wrapping */
            min-width: 100px;
        }

            .square .name {
                color: black;
                font-weight: bold;
                /* Remove unnecessary positioning styles */
                margin: 0 auto; /* Center the text horizontally */
                /* No need for position: absolute, top, vertical-align */
                overflow: hidden; /* Hide overflowing text */
                text-overflow: ellipsis; /* Add ellipsis (...) for overflow */
                white-space: nowrap; /* Prevent text from wrapping */
                margin-right: 25px; /* Add space for the 'x' */
                margin-left: 0;
            }

        .bracket-container {
            position: absolute;
            width: 100%;
            height: 100%;
        }

            .bracket-container svg {
                width: 100%; /* Make the SVG fill its container */
                height: 100%; /* Make the SVG fill its container */
                display: block; /* Prevents small space below SVG in some browsers */
            }

            .bracket-container .label-container {
                position: absolute; /* Position the container absolutely */
                display: flex; /* Use flexbox */
                align-items: flex-end; /* Align items to the bottom */
                left: 0px; /* Adjust the left position as needed */
                height: 0; /* No height to avoid affecting layout */
            }


            .bracket-container .label {
                color: red; /* Change text color for better visibility */
                font-weight: bold; /* Make the text bold */
                border: 2px dashed #f69c55;
            }
    </style>
</head>

<div class="bracket br-2">
    @{
        int bracketHeight = 100;
        int topY = 50;
        int width = 200;
        Queue<int> yPointsPrevRound = new Queue<int>();
    }


    <div class="bracket-container">
        @for (int i = 0; i < ViewBag.Rounds; i++)
        {
            //List<Game>? games = rounds.ElementAtOrDefault(i)?.Games ?? null;
            int round = i + 1;

            @for (int j = 0; j < ViewBag.Games[i]; j++)
            {
                if (i == 0)
                {

                    <svg>
                        <polyline points="0, @topY @width, @topY @width, @(topY + bracketHeight) 0, @(topY + bracketHeight)"
                                  fill="none" stroke="black"
                                  transform="translate(@(i * width), 0)" />
                    </svg>

                    
                        int[] namePos = { topY, topY + bracketHeight };
                    


                    @for (int k = 0; k < 2; k++)
                    {
                        int pos = namePos[k];
                        <div id=TeamId class="label-container" draggable="true" style="left: 0px; top: @(pos + "px")">
                            <span class="label">
                                @{
                                    string teamString = "";
                                }
                                @if (/*teams[k]?.ByeTeam == true*/ false)
                                {
                                    teamString = "Bye";
                                }
                                else
                                {
                                    //string name1 = @teams[k]?.Players.ElementAtOrDefault(0)?.Name ?? "";
                                    //string name2 = @teams[k]?.Players.ElementAtOrDefault(1)?.Name ?? "";
                                    string name1 = "TEST1";
                                    string name2 = "TEST2";

                                    if (string.IsNullOrEmpty(name1) && string.IsNullOrEmpty(name2))
                                        teamString = "";
                                    else if (string.IsNullOrEmpty(name1))
                                        teamString = name2;
                                    else if (string.IsNullOrEmpty(name2))
                                        teamString = name1;
                                    else
                                        teamString = name1 + " and " + name2;
                                }
                                @teamString
                            </span>
                        </div>
                    }









                    yPointsPrevRound.Enqueue(topY);
                    yPointsPrevRound.Enqueue(topY + bracketHeight);

                    topY += bracketHeight + 50;


                }
            }
        }

    </div>
    </div>
