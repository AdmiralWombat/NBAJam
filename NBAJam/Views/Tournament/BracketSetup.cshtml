@model BracketSetupViewModel

@{
    ViewBag.Title = "Bracket Setup";


}

<head>
    <style>
        .bracket-container {
        position: absolute;
        width: 100%;
        height: 100%;
        }

        .bracket-container svg {
        width: 100%; /* Make the SVG fill its container */
        height: 100%; /* Make the SVG fill its container */
        display: block; /* Prevents small space below SVG in some browsers */
        position: absolute;
        z-index: 0;
        }

        .modal-high-zindex {
        z-index: 1050; /* Adjust as needed */
        }

        .svg-low-zindex {
        z-index: 0;
        }

        .bracket-container .label-container {
        position: absolute; /* Position the container absolutely */
        display: flex; /* Use flexbox */
        align-items: flex-end; /* Align items to the bottom */
        left: 0px; /* Adjust the left position as needed */
        height: 0; /* No height to avoid affecting layout */
        }

        .bracket-container .team-container {
        height: 40px;
        width: auto;
        max-width: 170px;
        cursor: move;
        border: 2px solid black;
        position: relative;
        display: flex; /* Key for dynamic width */
        align-items: center; /* Key for vertical centering */
        padding: 0 10px; /* Add some padding for visual comfort */
        box-shadow: 0 0 10px rgba(0,0,0,.05), 2px 2px 5px rgba(0,0,0,.75);
        border-radius: 14px;
        white-space: nowrap; /* Prevent text from wrapping */
        min-width: 170px;
        z-index: 3;
        }

        .bracket-container .score-container {
        height: 40px;
        width: auto;
        max-width: 50px;
        position: relative;
        display: flex; /* Key for dynamic width */
        align-items: center; /* Key for vertical centering */
        padding: 0 5px;
        white-space: nowrap; /* Prevent text from wrapping */
        min-width: 50px;
        z-index: 3;
        }


        .bracket-container .label {
        font-weight: bold; /* Make the text bold */
        background: none;
        border: none;
        padding: 0;
        }

        .modal-backdrop {
        z-index: -1;
        }

        .bracket-container .submit-button-container {
        text-align: center;
        margin-top: 20px; /* Add some space between bracket and button */
        z-index: 3;
        }
    </style>
</head>

<h2>@Model.TournamentName - Bracket Setup</h2>

@functions {
    string GetDeleteModalId(int tournamentId)
    {
        return "#deleteModal" + tournamentId;
    }

    string GetModalId(int tournamentId)
    {
        return "deleteModal" + tournamentId;
    }
}

@{
    int bracketHeight = 100;
    int topY = 50;
    int width = 200;
    Queue<int> yPointsPrevRound = new Queue<int>();
    int maxBracketHeight = 0;

}

<form asp-action="BracketSetup" method="post" enctype="multipart/form-data">
    <input type="hidden" asp-for="TournamentId" />
    <input type="hidden" asp-for="TournamentName" />

    @for (int m = 0; m < Model.TeamIds.Count; m++)
    {
        <input type="hidden" name="TeamIds[@m]" value="@Model.TeamIds[m]" />
    }

    @for (int m = 0; m < Model.PlayerIds.Count; m++)
    {
        <input type="hidden" name="PlayerIds[@m]" value="@Model.PlayerIds[m]" />
    }


    <div class="bracket-container">
        @{
            int i = 0;
        }

        @for (i = 0; i < ViewBag.Rounds; i++)
        {
            int teamGameCount = 0;
            @for (int j = 0; j < ViewBag.Games[i]; j++)
            {
                if (i == 0)
                {

                    <svg class="svg-low-zindex">
                        <polyline points="0, @topY @width, @topY @width, @(topY + bracketHeight) 0, @(topY + bracketHeight)"
                        fill="none" stroke="black"
                        transform="translate(@(i * width), 0)" />

                    </svg>


                }
                else
                {
                    int top1 = yPointsPrevRound.Dequeue();
                    int bottom1 = yPointsPrevRound.Dequeue();
                    int top2 = yPointsPrevRound.Dequeue();
                    int bottom2 = yPointsPrevRound.Dequeue();

                    topY = (top1 + bottom1) / 2;
                    int bottomY = (top2 + bottom2) / 2;
                    bracketHeight = bottomY - topY;

                    <svg class="svg-low-zindex">
                        <polyline points="0, @topY @width, @topY @width, @(topY + bracketHeight) 0, @(topY + bracketHeight)"
                        fill="none" stroke="black"
                        transform="translate(@(i * width), 0)" />

                    </svg>
                }

                if (i == 0)
                {
                    int[] namePosY = { topY, topY + bracketHeight };
                    for (int k = 0; k < 2; k++)
                    {
                        int posY = namePosY[k];
                        int posX = i * width + 5;
                        <div id=TeamId class="label-container" style="left: @(posX + "px"); top: @(posY + "px")">
                            <div class="team-container" style="background:white">
                                <select class="form-control label" id="team-0" name="teamBracketPositionIds[@j][@k]">
                                    <option value="">-- Select Team --</option>
                                    @{
                                        int teamCount = 0;
                                    }
                                    @foreach (Team team in Model.Teams)
                                    {
                                        var temp = teamGameCount == teamCount;
                                        <option value="@team.TeamId" selected="@(temp ? "selected" : null)">
                                            @team.Name
                                        </option>
                                        teamCount++;
                                    }

                                    
                                </select>                        
                            </div>
                        </div>

                        teamGameCount++;
                    }

                }

                yPointsPrevRound.Enqueue(topY);
                yPointsPrevRound.Enqueue(topY + bracketHeight);


                topY += bracketHeight + 50;
                maxBracketHeight = Math.Max(maxBracketHeight, topY);                

            }        
        }
        <div class="label-container" style="top: @(maxBracketHeight + 20)px;">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(Model.TournamentId)">Create Tournament</button>
            
        </div>
    </div>
    
    <div class="modal fade" id="@GetModalId(Model.TournamentId)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">This will overwrite the existing tournament</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Confirm</button>
                </div>
            </div>
        </div>
    </div>
    
</form>


    


    