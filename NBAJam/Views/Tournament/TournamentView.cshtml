@model Tournament

@{
    ViewBag.Title = "Bracket";
    List<Round> rounds = Model.Rounds;
}
<head>
    <style>
        .bracket-container {
            position: absolute;
            width: 100%;
            height: 100%;
        }

            .bracket-container svg {
                width: 100%; /* Make the SVG fill its container */
                height: 100%; /* Make the SVG fill its container */
                display: block; /* Prevents small space below SVG in some browsers */
                position: absolute;
            }

            .bracket-container .label-container {
                position: absolute; /* Position the container absolutely */
                display: flex; /* Use flexbox */
                align-items: flex-end; /* Align items to the bottom */
                left: 0px; /* Adjust the left position as needed */
                height: 0; /* No height to avoid affecting layout */
            }


            .bracket-container .label {
                color: red; /* Change text color for better visibility */
                font-weight: bold; /* Make the text bold */
                border: 2px dashed #f69c55;
            }
    </style>
</head>


    @{
        int bracketHeight = 100;
        int topY = 50;
        int width = 200;
        Queue<int> yPointsPrevRound = new Queue<int>();
    }
    <div class="bracket-container">
        
            @for (int i = 0; i < ViewBag.Rounds; i++)
            {
                List<Game>? games = rounds.ElementAtOrDefault(i)?.Games ?? null;
                int round = i + 1;

                @for (int j = 0; j < ViewBag.Games[i]; j++)
                {
                     if (i == 0)
                        {

                    <svg>
                                    <polyline points="0, @topY @width, @topY @width, @(topY + bracketHeight) 0, @(topY + bracketHeight)"
                                              fill="none" stroke="black"
                                              transform="translate(@(i * width), 0)" />

                        </svg>

                    
                        }
                        else
                        {
                            int top1 = yPointsPrevRound.Dequeue();
                            int bottom1 = yPointsPrevRound.Dequeue();
                            int top2 = yPointsPrevRound.Dequeue();
                            int bottom2 = yPointsPrevRound.Dequeue();

                            topY = (top1 + bottom1) / 2;
                            int bottomY = (top2 + bottom2) / 2;
                            bracketHeight = bottomY - topY;

                    <svg>
                        <polyline points="0, @topY @width, @topY @width, @(topY + bracketHeight) 0, @(topY + bracketHeight)"
                                              fill="none" stroke="black"
                                              transform="translate(@(i * width), 0)" />

                        </svg>
                    }

                    Team?[] teams = { games?.ElementAtOrDefault(j)?.Team1 ?? null, games?.ElementAtOrDefault(j)?.Team2 ?? null };


                    @if (i == 0)
                    {
                        int[] namePos = { topY, topY + bracketHeight };
                        for (int k = 0; k < 2; k++)
                        {
                            int pos = namePos[k];
                            <div id=TeamId class="label-container" draggable="true" style="left: 0px; top: @(pos + "px")">
                                <span class="label">
                                    @{
                                        string teamString = "";
                                    }
                                    @if (teams[k]?.ByeTeam == true)
                                    {
                                        teamString = "Bye";
                                    }
                                    else
                                    {
                                        string name1 = @teams[k]?.Players.ElementAtOrDefault(0)?.Name ?? "";
                                        string name2 = @teams[k]?.Players.ElementAtOrDefault(1)?.Name ?? "";

                                        if (string.IsNullOrEmpty(name1) && string.IsNullOrEmpty(name2))
                                            teamString = "";
                                        else if (string.IsNullOrEmpty(name1))
                                            teamString = name2;
                                        else if (string.IsNullOrEmpty(name2))
                                            teamString = name1;
                                        else
                                            teamString = name1 + " and " + name2;
                                    }
                                    @teamString
                                </span>
                            </div>
                        }
                    }
                

                    yPointsPrevRound.Enqueue(topY);
                    yPointsPrevRound.Enqueue(topY + bracketHeight);

                    topY += bracketHeight + 50;
                }     
            }
        
    </div>

