@model Tournament

@{
    ViewBag.Title = "Bracket";
    List<Round> rounds = Model.Rounds;
}
<head>
    <style>
        .bracket-container {
            position: absolute;
            width: 100%;
            height: 100%;
        }

            .bracket-container svg {
                width: 100%; /* Make the SVG fill its container */
                height: 100%; /* Make the SVG fill its container */
                display: block; /* Prevents small space below SVG in some browsers */
                position: absolute;
                z-index: 0;
            }

        .modal-high-zindex {
            z-index: 1050; /* Adjust as needed */
        }

        .svg-low-zindex {
            z-index: 0;
        }

        .bracket-container .label-container {
            position: absolute; /* Position the container absolutely */
            display: flex; /* Use flexbox */
            align-items: flex-end; /* Align items to the bottom */
            left: 0px; /* Adjust the left position as needed */
            height: 0; /* No height to avoid affecting layout */
        }

        .bracket-container .team-container {
            height: 40px;
            width: auto;
            max-width: 170px;
            cursor: move;
            border: 2px solid black;
            position: relative;
            display: flex; /* Key for dynamic width */
            align-items: center; /* Key for vertical centering */
            padding: 0 10px; /* Add some padding for visual comfort */
            box-shadow: 0 0 10px rgba(0,0,0,.05), 2px 2px 5px rgba(0,0,0,.75);
            border-radius: 14px;
            white-space: nowrap; /* Prevent text from wrapping */
            min-width: 170px;
            z-index: 3;
            
        }

        .bracket-container .score-container {
            height: 40px;
            width: auto;
            max-width: 50px;          
            position: relative;
            display: flex; /* Key for dynamic width */
            align-items: center; /* Key for vertical centering */
            padding: 0 5px;   
            
            white-space: nowrap; /* Prevent text from wrapping */
            min-width: 50px;
            z-index: 3;
        }


        .bracket-container .label {            
            font-weight: bold; /* Make the text bold */            
            background: none;
            border: none;
            padding: 0;
        }

        .modal-backdrop {
            z-index: -1;
        }
    </style>
</head>

@functions {
    string GetDeleteModalId(Game game)
    {
        return "#deleteModal" + game.GameId;
    }

    string GetModalId(Game game)
    {
        return "deleteModal" + game.GameId;
    }
}

@{
    int bracketHeight = 100;
    int topY = 50;
    int width = 200;
    Queue<int> yPointsPrevRound = new Queue<int>();
}
<div class="bracket-container">

    @{
        int i = 0;
    }

    @for (i = 0; i < ViewBag.Rounds; i++)
    {
        List<Game>? games = rounds.ElementAtOrDefault(i)?.Games ?? null;
        int round = i + 1;

        @for (int j = 0; j < ViewBag.Games[i]; j++)
        {

            if (i == 0)
            {

                <svg class="svg-low-zindex">
                    <polyline points="0, @topY @width, @topY @width, @(topY + bracketHeight) 0, @(topY + bracketHeight)"
                              fill="none" stroke="black"
                              transform="translate(@(i * width), 0)" />

                </svg>


            }
            else
            {
                int top1 = yPointsPrevRound.Dequeue();
                int bottom1 = yPointsPrevRound.Dequeue();
                int top2 = yPointsPrevRound.Dequeue();
                int bottom2 = yPointsPrevRound.Dequeue();

                topY = (top1 + bottom1) / 2;
                int bottomY = (top2 + bottom2) / 2;
                bracketHeight = bottomY - topY;

                <svg class="svg-low-zindex">
                    <polyline points="0, @topY @width, @topY @width, @(topY + bracketHeight) 0, @(topY + bracketHeight)"
                              fill="none" stroke="black"
                              transform="translate(@(i * width), 0)" />

                </svg>
            }

            Team?[] teams = { games?.ElementAtOrDefault(j)?.Team1 ?? null, games?.ElementAtOrDefault(j)?.Team2 ?? null };
            Game? game = games?.ElementAtOrDefault(j);
            int[] namePosY = { topY, topY + bracketHeight };
            for (int k = 0; k < 2; k++)
            {
                int posY = namePosY[k];
                int posX = i * width + 5;
                <div id=TeamId class="label-container" style="left: @(posX + "px"); top: @(posY + "px")">

                    @{
                        string teamColor = "none";

                        if ((k == 0 && game?.Team1Won == true) || (k == 1 && game?.Team2Won == true))
                            teamColor = "green";
                    }
                    <div class="team-container" style="background:@teamColor">



                        @if (game != null)
                        {
                            if (teams[0]?.ByeTeam == false && teams[1]?.ByeTeam == false)
                            {
                                <button type="button" class="label" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(game)">
                                    @{
                                        string teamString = "";
                                    }
                                    @if (teams[k]?.ByeTeam == true)
                                    {
                                        teamString = "Bye";
                                    }
                                    else
                                    {
                                        string name1 = @teams[k]?.Players.ElementAtOrDefault(0)?.Name ?? "";
                                        string name2 = @teams[k]?.Players.ElementAtOrDefault(1)?.Name ?? "";

                                        if (string.IsNullOrEmpty(name1) && string.IsNullOrEmpty(name2))
                                            teamString = "";
                                        else if (string.IsNullOrEmpty(name1))
                                            teamString = name2;
                                        else if (string.IsNullOrEmpty(name2))
                                            teamString = name1;
                                        else
                                            teamString = name1 + " and " + name2;
                                    }
                                    @teamString
                                </button>
                            }
                            else
                            {
                                <span class="label">
                                    @{
                                        string teamString = "";
                                    }
                                    @if (teams[k]?.ByeTeam == true)
                                    {
                                        teamString = "Bye";
                                    }
                                    else
                                    {
                                        string name1 = @teams[k]?.Players.ElementAtOrDefault(0)?.Name ?? "";
                                        string name2 = @teams[k]?.Players.ElementAtOrDefault(1)?.Name ?? "";

                                        if (string.IsNullOrEmpty(name1) && string.IsNullOrEmpty(name2))
                                            teamString = "";
                                        else if (string.IsNullOrEmpty(name1))
                                            teamString = name2;
                                        else if (string.IsNullOrEmpty(name2))
                                            teamString = name1;
                                        else
                                            teamString = name1 + " and " + name2;
                                    }
                                    @teamString
                                </span>
                            }


                            <form asp-action="AddGame" asp-controller="Tournament" method="post">
                                <input type="hidden" asp-for="TournamentId" />
                                <input type="hidden" asp-for="@game.GameId" name="gameId" />
                                <input type="hidden" asp-for="@i" name="round" />
                                <input type="hidden" asp-for="@j" name="gameIndex" />
                                <input type="hidden" asp-for="@teams[0].TeamId" name="team1Id" />
                                <input type="hidden" asp-for="@teams[1].TeamId" name="team2Id" />
                                <div class="modal fade modal-high-zindex" id="@GetModalId(game)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h1 class="modal-title fs-5" id="exampleModalLabel">Game @game.GameId</h1>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                            </div>

                                            <div class="modal-body">
                                                <div class="form-group">
                                                    <label>@game.Team1?.Name</label>
                                                    <input type="number" class="form-control" name="team1Points" placeholder="Enter @game.Team1?.Name's score" />
                                                </div>
                                                <div class="form-group">
                                                    <label>@game.Team2?.Name</label>
                                                    <input type="number" class="form-control" name="team2Points" placeholder="Enter @game.Team2?.Name's score" />
                                                </div>
                                            </div>

                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                <button type="submit" class="btn btn-primary">Ok</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        }
                        else
                        {
                            
                        }

                    </div>

                    @if (teams[0]?.ByeTeam == false && teams[1]?.ByeTeam == false)
                    {
                        <div class="score-container">
                            @(k == 0 ? games?.ElementAtOrDefault(j)?.Team1Points : games?.ElementAtOrDefault(j)?.Team2Points)
                        </div>
                    }

                </div>
                
            }

            yPointsPrevRound.Enqueue(topY);
            yPointsPrevRound.Enqueue(topY + bracketHeight);

            topY += bracketHeight + 50;
        }
    }

    @{
        int top = yPointsPrevRound.Dequeue();
        int bottom = yPointsPrevRound.Dequeue();
        topY = (top + bottom) / 2;
    }
    <svg class="svg-low-zindex">
        <polyline points="0, @topY @width, @topY"
                  fill="none" stroke="black"
                  transform="translate(@(i * width), 0)" />

    </svg>

    @if (ViewBag.WinningTeamName != null && ViewBag.WinningTeamName != "")
    {
        int posX = i * width + 5;
        int posY = topY;
        <div id=TeamId class="label-container" style="left: @(posX + "px"); top: @(posY + "px")">
            <div class="team-container" style="background:green">
                <span class="label">
                    @ViewBag.WinningTeamName
                </span>
            </div>
        </div>
    }



</div>

